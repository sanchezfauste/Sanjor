#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\begin_preamble
\setlength\parindent{0pt}
\end_preamble
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language catalan
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format pdf2
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 10
\pdf_breaklinks true
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\pdf_quoted_options "linkcolor=blue, urlcolor=blue"
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\topmargin 3cm
\rightmargin 3cm
\bottommargin 3cm
\secnumdepth 5
\tocdepth 5
\paragraph_separation indent
\paragraph_indentation default
\quotes_language french
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "mathescape=true"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
author{
\end_layout

\begin_layout Plain Layout

	Meritxell Jordana Gavieiro
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

	
\backslash
texttt{53395631-G}
\end_layout

\begin_layout Plain Layout

	
\backslash
and
\end_layout

\begin_layout Plain Layout

	Marc Sánchez Fauste
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

	
\backslash
texttt{78098274-A}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Title
El llenguatge de programació Sanjor
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Introducció
\end_layout

\begin_layout Standard
El llenguatge Sanjor, està basat en la sintaxi del llenguatge de programació
 C.
\end_layout

\begin_layout Section
Variables
\end_layout

\begin_layout Standard
El nostre llenguatge suporta dos tipus de variables 
\emph on
int
\emph default
 i 
\emph on
char
\emph default
.
 Les variables es poden definir en qualsevol posició del codi, però evidentment,
 s'han de declarar abans de poder-les utilitzar.
\end_layout

\begin_layout Subsection
Tipus enter
\end_layout

\begin_layout Standard
Anem a veure com declarar i assignar un valor a una variable de tipus enter:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,tabsize=4,frame=single"
inline false
status open

\begin_layout Plain Layout

int a;
\end_layout

\begin_layout Plain Layout

a = 3;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
No es pot declarar i assignar una variable en una sola sentència, però si
 que es poden declarar vàries variables en una única sentència:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,tabsize=4,frame=single"
inline false
status open

\begin_layout Plain Layout

int a, b, c;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Una variable de tipus enter també pot ser declarada com a constant.
 Cal destacar que les variables constants un cop se'ls ha assignat un valor,
 aquest no es pot modificar i que només es pot declarar una variable constant
 en una sentència:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,tabsize=4,frame=single"
inline false
status open

\begin_layout Plain Layout

const int k;
\end_layout

\begin_layout Plain Layout

k = 3; // És correcte.
\end_layout

\begin_layout Plain Layout

k = 4; // Seria incorrecte, ja que k ja ha estat assignada al valor 3.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
El llenguatge també permet declarar vectors d'enters:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,tabsize=4,frame=single"
inline false
status open

\begin_layout Plain Layout

int vect[4]; // Declara vect com a a un vector de 4 enters.
\end_layout

\begin_layout Plain Layout

vect[0] = 4; // Assigna el valor 4 a la primera posició de vect.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Tipus caràcter
\end_layout

\begin_layout Standard
Anem a veure com declarar i assignar un valor a una variable de tipus caràcter:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,tabsize=4,frame=single"
inline false
status open

\begin_layout Plain Layout

char c;
\end_layout

\begin_layout Plain Layout

c = 'K';
\end_layout

\end_inset


\end_layout

\begin_layout Standard
No es pot declarar i assignar una variable en una sola sentència, però si
 que es poden declarar vàries variables en una única sentència:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,tabsize=4,frame=single"
inline false
status open

\begin_layout Plain Layout

char a, b, c;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Una variable de tipus caràcter també pot ser declarada com a constant.
 Cal destacar que les variables constants un cop se'ls ha assignat un valor,
 aquest no es pot modificar i que només es pot declarar una variable constant
 en una sentència:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,tabsize=4,frame=single"
inline false
status open

\begin_layout Plain Layout

const char k;
\end_layout

\begin_layout Plain Layout

k = 'A'; // És correcte.
\end_layout

\begin_layout Plain Layout

k = 'B'; // Seria incorrecte, ja que k ja ha estat assignada al caràcter
 A.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
El llenguatge també permet declarar cadenes de caràcters de longitud fixa:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,tabsize=4,frame=single"
inline false
status open

\begin_layout Plain Layout

char msg[30]; // Declara una cadena de màxim 30 caràcter.
\end_layout

\begin_layout Plain Layout

msg = "Això és una cadena!"; // Assignem text a la cadena.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Operands matemàtics
\end_layout

\begin_layout Standard
Anem a veure totes les operacions matemàtiques que suporta el llenguatge:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,tabsize=4,frame=single"
inline false
status open

\begin_layout Plain Layout

int a, b, c;
\end_layout

\begin_layout Plain Layout

a = 1;
\end_layout

\begin_layout Plain Layout

b = 2;
\end_layout

\begin_layout Plain Layout

c = a + b;
\end_layout

\begin_layout Plain Layout

c = a - b;
\end_layout

\begin_layout Plain Layout

c = a / b;
\end_layout

\begin_layout Plain Layout

c = a * b;
\end_layout

\begin_layout Plain Layout

c = a / b + 3 - (4 * 5);
\end_layout

\begin_layout Plain Layout

int d[2];
\end_layout

\begin_layout Plain Layout

d[0] = 7;
\end_layout

\begin_layout Plain Layout

d[1] = 4;
\end_layout

\begin_layout Plain Layout

c = d[0] + d[1] + a;
\end_layout

\end_inset


\end_layout

\begin_layout Section
Operands lògics
\end_layout

\begin_layout Standard
Els operands lògics que podem utilitzar a les sentències 
\emph on
if
\emph default
 
\emph on
else
\emph default
 i 
\emph on
while
\emph default
 són: ==, !=, <, >, >=, <=, &&, ||.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Les expressions booleanes es poden escriure seguint l'estil del llenguatge
 C, permetent també agrupar condicions mitjançant ().
 Un possible exemple:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,tabsize=4,frame=single"
inline false
status open

\begin_layout Plain Layout

int i, n;
\end_layout

\begin_layout Plain Layout

i = 0;
\end_layout

\begin_layout Plain Layout

n = 3;
\end_layout

\begin_layout Plain Layout

while (i < n) {
\end_layout

\begin_layout Plain Layout

    · · ·
\end_layout

\begin_layout Plain Layout

	i = i + 1;	
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

if ((n == 3 || n > 25) && i < 30) {
\end_layout

\begin_layout Plain Layout

    · · ·
\end_layout

\begin_layout Plain Layout

} else {
\end_layout

\begin_layout Plain Layout

    · · ·
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Declaració de funcions
\end_layout

\begin_layout Standard
Les funcions poden ser de tipus 
\emph on
void
\emph default
, 
\emph on
int 
\emph default
o 
\emph on
char
\emph default
.
 Anem a veure com declarar i cridar a una funció de tipus 
\emph on
int
\emph default
.
 Cal destacar que les funcions de tipus 
\emph on
int
\emph default
 i 
\emph on
char
\emph default
 han de tenir com a mínim una sentència 
\emph on
return
\emph default
, i que una funció pot rebre paràmetres de qualsevol tipus.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,tabsize=4,frame=single"
inline false
status open

\begin_layout Plain Layout

int funcio(int i, int vect[3], char c, char msg[30]) {
\end_layout

\begin_layout Plain Layout

	puts msg;
\end_layout

\begin_layout Plain Layout

	put c;
\end_layout

\begin_layout Plain Layout

	return i + vect[2];
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int res;
\end_layout

\begin_layout Plain Layout

int i;
\end_layout

\begin_layout Plain Layout

i = 4;
\end_layout

\begin_layout Plain Layout

int v[3];
\end_layout

\begin_layout Plain Layout

v[2] = 6;
\end_layout

\begin_layout Plain Layout

char c;
\end_layout

\begin_layout Plain Layout

c = 'L';
\end_layout

\begin_layout Plain Layout

char msg[30];
\end_layout

\begin_layout Plain Layout

msg = "Some message";
\end_layout

\begin_layout Plain Layout

res = funcio(i, v[], c, msg[]);
\end_layout

\begin_layout Plain Layout

// Quan es passa un vector a una funció s'ha d'especificar amb [].
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Un altre fet a destacar és que les variables declarades a les funcions són
 independents de les variables declarades al programa principal, és a dir,
 que dins d'una funció no es poden cridar les variables del programa principal
 i que fora de la funció no es poden utilitzar les variables declarades
 a dins d'aquesta.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

El llenguatge suporta la recursivitat, per tant, una funció es pot cridar
 recursivament.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Una funció pot ser declarada en qualsevol posició del codi, però sempre
 abans de ser cridada.
\end_layout

\begin_layout Section
Funcions proporcionades pel llenguatge
\end_layout

\begin_layout Standard
El nostre llenguatge incorpora una sèrie de funcions predefinides, que es
 poden utilitzar a l'hora d'escriure un programa:
\end_layout

\begin_layout Itemize

\emph on
write
\emph default
 aquesta funció escriu per pantalla el resultat d'avaluar l'expressió que
 se li indica:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,tabsize=4,frame=single"
inline false
status open

\begin_layout Plain Layout

int a;
\end_layout

\begin_layout Plain Layout

a = 5;
\end_layout

\begin_layout Plain Layout

write a; // Mostrarà per pantalla 5.
\end_layout

\begin_layout Plain Layout

write a + 4; // Mostrarà per pantalla 9.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize

\emph on
read
\emph default
 llegeix un nombre enter o un caràcter introduït per teclat i el guarda
 a la variable especificada:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,tabsize=4,frame=single"
inline false
status open

\begin_layout Plain Layout

int a;
\end_layout

\begin_layout Plain Layout

read a; // Demana introduïr un nombre per teclat i el guarda a <a>.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize

\emph on
put
\emph default
 escriu per pantalla un caràcter:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,tabsize=4,frame=single"
inline false
status open

\begin_layout Plain Layout

char c;
\end_layout

\begin_layout Plain Layout

c = 'A';
\end_layout

\begin_layout Plain Layout

put c; // Mostra per pantalla: A.
\end_layout

\begin_layout Plain Layout

put 'C'; // Mostra per pantalla: C.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize

\emph on
puts
\emph default
 escriu per pantalla una cadena de caràcters:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,tabsize=4,frame=single"
inline false
status open

\begin_layout Plain Layout

char msg[30];
\end_layout

\begin_layout Plain Layout

msg = "Hola món";
\end_layout

\begin_layout Plain Layout

puts msg; // Mostra per pantalla: Hola món.
\end_layout

\begin_layout Plain Layout

puts "Adéu món"; // Mostra per pantalla: Adéu món.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize

\emph on
length
\emph default
 retorna la longitud d'un vector:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,tabsize=4,frame=single"
inline false
status open

\begin_layout Plain Layout

int v[5];
\end_layout

\begin_layout Plain Layout

write length(v); // Mostrarà per pantalla la longitud de v.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Section
Tractament d'errors
\end_layout

\begin_layout Standard
El nostre compilador mostra alguns errors de compilació conjuntament amb
 un text descriptiu, on s'indica la línia on s'ha produït i el motiu:
\end_layout

\begin_layout Itemize
Quan es tracta de reasignar una variable que ha estat declarada com a constant.
\end_layout

\begin_layout Itemize
Quan s'intenta guardar una cadena de caràcters que excedeix la capacitat
 màxima que té assignat el vector de caràcters.
\end_layout

\begin_layout Itemize
Quan s'intenta definir una funció que ja ha estat definida anteriorment.
\end_layout

\begin_layout Itemize
Quan s'intenta cridar a una funció que no ha estat definida prèviament.
\end_layout

\begin_layout Itemize
Quan s'intenta consultar una variable que no ha estat definida.
\end_layout

\begin_layout Itemize
Quan s'intenta tornar a declarar una variable que ja s'ha declarat anteriorment.
\end_layout

\begin_layout Itemize
Quan hi ha un error de sintaxi al codi.
\end_layout

\begin_layout Section
Altres aspectes a destacar
\end_layout

\begin_layout Standard
El nostre llenguatge suporta la inclusió d'altres fitxers al codi mitjançant
 la sintaxi de C:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,tabsize=4,frame=single"
inline false
status open

\begin_layout Plain Layout

#include "filename.sj"
\end_layout

\begin_layout Plain Layout

// Aquesta sentència inclourà el fitxer 'filename.sj'.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
També suporta comentaris seguint l'estil del llenguatge C:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,tabsize=4,frame=single"
inline false
status open

\begin_layout Plain Layout

// Comentari d'una línia
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Comentari
\end_layout

\begin_layout Plain Layout

multilínia
\end_layout

\begin_layout Plain Layout

*/
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Comentari 
\backslash

\end_layout

\begin_layout Plain Layout

multilínia 2
\end_layout

\end_inset


\end_layout

\begin_layout Standard
També cal destacar que el codi suporta sentències 
\emph on
if else
\emph default
 i 
\emph on
while
\emph default
 seguint l'estil del llenguatge de programació C, però tenint en compte
 que una sentència 
\emph on
if
\emph default
 sempre ha de tenir 
\emph on
else
\emph default
 (pot ser buit):
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,tabsize=4,frame=single"
inline false
status open

\begin_layout Plain Layout

void cool_function(int v[4]) {
\end_layout

\begin_layout Plain Layout

    int i;
\end_layout

\begin_layout Plain Layout

    i = 0;
\end_layout

\begin_layout Plain Layout

    while (i < length(v)) {
\end_layout

\begin_layout Plain Layout

        if (v[i] == 3) {
\end_layout

\begin_layout Plain Layout

            puts "He trobat un 3!";
\end_layout

\begin_layout Plain Layout

        } else {
\end_layout

\begin_layout Plain Layout

            
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Testing
\end_layout

\begin_layout Standard
El codi font inclou varis tests per a provar el compilador:
\end_layout

\begin_layout Itemize
Programes amb compilació i execució correcta, presents al directori 
\emph on
'tests/correct'
\emph default
.
 Es poden executar amb la comanda:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "tabsize=4,frame=single"
inline false
status open

\begin_layout Plain Layout

$
\backslash
textdollar$ make test
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Programes amb errors de compilació, presents al directori 
\emph on
'tests/error'
\emph default
.
 Es poden testejar amb la comanda:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "tabsize=4,frame=single"
inline false
status open

\begin_layout Plain Layout

$
\backslash
textdollar$ make error
\end_layout

\end_inset


\end_layout

\end_deeper
\end_body
\end_document
